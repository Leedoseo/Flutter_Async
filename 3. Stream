// Stream 기본 사용법
import "dart:async";

void main() {
  final controller = StreamController(); // StreamController 선언
  final stream = controller.stream; // 스트림 가져오기
  
  // Stream에 listen() 함수를 실행하면 값이 주입될 때마다 콜백 함수를 실행할 수 있음
  final streamListener1 = stream.listen((val) {
    print(val);
  });
  
  // Stream에 값을 주입하기
  controller.sink.add(1);
  controller.sink.add(2);
  controller.sink.add(3);
  controller.sink.add(4);
}

// 브로드캐스트 스트림
import "dart:async";

void main() {
  final controller = StreamController();
  
  // 여러 번 리슨할 수 있는 Broadcast Stream 객체 생성
  final stream = controller.stream.asBroadcastStream();
  
  // 첫 번째 listen() 함수
  final streamListener1 = stream.listen((val) {
    print("listening 1");
    print(val);
  });
  
  // 두 번째 listen() 함수
  final streamListener2 = stream.listen((val) {
    print("listening 2");
    print(val);
  });
  
  // add()를 실행할 때마다 listen()하는 모든 콜백 함수에 값이 주입됨
  controller.sink.add(1);
  controller.sink.add(2);
  controller.sink.add(3);
}

// 함수로 스트림 반환하는 방법
import "dart:async";

// Stream을 반환하는 함수는 async로 선언함
Stream<String> calculate(int number) async* {
  for (int i = 0; i < 5; i++) {
    
    // StreamController의 add()처럼 yield 키워드를 이용해서 값 변환
    yield 'i = $i';
    await Future.delayed(Duration(seconds: 1));
  }
}

void playStream() {
  calculate(1).listen((val){
    print(val);
  });
}

void main() {
  playStream();
}
